<?php

namespace App\Repository;

use App\Entity\Advert;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\QueryBuilder;
//use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Advert::class);
    }

	 public function getPublishedQueryBuilder()
	 {
	    return $this
	      ->createQueryBuilder('a')
	      ->where('a.published = :published')
	      ->setParameter('published', true)
	    ;
	 }

	 public function getAdverts($page, $nbPerPage)
	 {
	    $query = $this->createQueryBuilder('a')
	      ->leftJoin('a.image', 'i')
	      ->addSelect('i')
	      ->leftJoin('a.categories', 'c')
	      ->addSelect('c')
	      ->orderBy('a.date', 'DESC')
	      ->getQuery()
	    ;

	    
	    $query
	      // On définit l'annonce à  partir de laquelle commencer la liste
	      ->setFirstResult(($page-1) * $nbPerPage)
	      // Ainsi que le nombre d'annonce Ã  afficher sur une page
	      ->setMaxResults($nbPerPage)
	    ;

	    // Enfin, on retourne l'objet Paginator correspondant Ã  la requÃªte construite
	    // (n'oubliez pas le use correspondant en dÃ©but de fichier)
	    return new Paginator($query, true);
	 }
	 
	 public function getAdvertsById($id, $page, $nbPerPage)
	 {   
	     $query = $this->createQueryBuilder('a')
	     ->leftJoin('a.image', 'i')
	     ->addSelect('i')
	     ->leftJoin('a.categories', 'c')
	     ->addSelect('c')
	     ->leftJoin('a.user', 'u')
	     ->addSelect('u')
	     ->where('u.id = :id')
	     ->setParameter('id', $id)
	     ->orderBy('a.date', 'DESC')
	     ->getQuery()
	     ;
	     
	     
	     $query
	     // On définit l'annonce à  partir de laquelle commencer la liste
	     ->setFirstResult(($page-1) * $nbPerPage)
	     // Ainsi que le nombre d'annonce Ã  afficher sur une page
	     ->setMaxResults($nbPerPage);
	     
	     
	     // Enfin, on retourne l'objet Paginator correspondant Ã  la requÃªte construite
	     // (n'oubliez pas le use correspondant en dÃ©but de fichier)
	     return new Paginator($query, true);
	     //return $query->getResult();
	 }
	 
	 /**
	  * Recupère les données dans la base en fonction de la lat, lng, category et eventuellement une expression 
	  * @param string $category
	  * @param float $lat
	  * @param float $lng
	  * @param int $distance
	  * @param string $q
	  * @return array      
	  */
	 public function getAdvertsWithGeolocateAndCategory($category, $lat, $lng, $distance, $q)
	 {
	    $formule="(6366*acos(cos(radians($lat))*cos(radians(`lat`))*cos(radians(`lng`) -radians($lng))+sin(radians($lat))*sin(radians(`lat`))))";    
	    $sql = "\n"
	         . "SELECT * \n"
	             . "FROM `advert`\n"
	                 . "INNER JOIN `image`\n"
	                     . "ON `advert`.`image_id` = `image`.`id`\n"
	                 . "INNER JOIN `geolocate` \n"
	                     . "ON `advert`.`geolocate_id` = `geolocate`.`id`\n"
	                 . "INNER JOIN `advert_category`\n" 
                         ."ON `advert`.`id` = `advert_category`.`advert_id`\n"
	                 . "INNER JOIN `category`\n" 
                         ."ON `category`.`id` = `advert_category`.`category_id`\n"
                         ."AND `category`.`name` = :category\n"
	         ."WHERE $formule <= :distance  \n";
        if ($q != "")
	       $sql .="AND (`advert`.`title` LIKE '%$q%' OR `advert`.`content` LIKE '%$q%') \n"; 

	    $sql .= "ORDER BY `advert`.`date` ASC";
	    
	    /*$entityManager = $this->getEntityManager();
	    //$query = $entityManager->createQuery($sql)->getResult();
	    $rsm = new ResultSetMapping();
	    $rsm->addEntityResult('OCPlatformBundle:Advert', 'a');
	    $rsm->addFieldResult('a','id','id');
	    $rsm->addFieldResult('a','title','title');
	    $rsm->addFieldResult('a','content','content');
	    $query = $entityManager->createNativeQuery($sql, $rsm);
	    */
	    
	    $stmt = $this->getEntityManager()
	    ->getConnection()
	    ->prepare($sql);
	    $stmt->bindValue('category', $category);
	    $stmt->bindValue('distance', $distance);
	    $stmt->execute();
	    

        try {
            return $stmt->fetchAll();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
	     
	      
	 }

	 public function getAdvertWithCategories(array $categoryNames)
	{
	  $qb = $this
	    ->createQueryBuilder('a')
	    ->Join('a.categories', 'c')
	    ->addSelect('c')
	    ->where($qb->expr()->in('c.name', $categoryNames));
	  

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}

	public function getAdvertWithApplications()
	{
	  $qb = $this
	    ->createQueryBuilder('a')
	    ->leftJoin('a.applications', 'app')
	    ->addSelect('app')
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}

	public function findByAuthorAndDate($author, $year)
	{
	  $qb = $this->createQueryBuilder('a');

	  $qb->where('a.author = :author')
	       ->setParameter('author', $author)
	     ->andWhere('a.date < :year')
	       ->setParameter('year', $year)
	     ->orderBy('a.date', 'DESC')
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}

	public function myFindAll()
	{
	  return $this
	    ->createQueryBuilder('a')
	    ->getQuery()
	    ->getResult()
	  ;
	}


	public function myFindOne($id)
	{
	  $qb = $this->createQueryBuilder('a');

	  $qb
	    ->where('a.id = :id')
	    ->setParameter('id', $id)
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}


	

	public function whereCurrentYear(QueryBuilder $qb)
	{
	    $qb
	      ->andWhere('a.date BETWEEN :start AND :end')
	      ->setParameter('start', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette annÃ©e
	      ->setParameter('end',   new \Datetime(date('Y').'-12-31'))  // Et le 31 dÃ©cembre de cette annÃ©e
	    ;
	    
	    return $qb;
	}

	public function myFind()
	{
	  $qb = $this->createQueryBuilder('a');

	  // On peut ajouter ce qu'on veut avant
	  $qb
	    ->where('a.author = :author')
	    ->setParameter('author', 'Marine')
	  ;

	  // On applique notre condition sur le QueryBuilder
	  $this->whereCurrentYear($qb);

	  // On peut ajouter ce qu'on veut après
	  $qb->orderBy('a.date', 'DESC');

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}

	public function myFindDQL($id)
	{
	  /*$query = $this->_em->createQuery('SELECT a FROM Advert a WHERE a.id = :id');
	  $query->setParameter('id', $id);
	  
	  // Utilisation de getSingleResult car la requête ne doit retourner qu'un seul résultat
	  return $query->getSingleResult();*/
	    
	  $stmt = $this->getEntityManager()
	    ->getConnection()
	    ->prepare('SELECT * FROM Advert a WHERE a.id = :id');
	    $stmt->bindValue('id', $id);
	    $stmt->execute();
	    return $stmt->fetchAll();
	}

	


	
}
